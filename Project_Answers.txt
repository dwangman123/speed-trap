			      EE 109  - Fall 2022
				  Speed Trap


Checkpoint 1:

1.  Splash screen with your name shown at start.

2.  Sensors start and stop timing.  If a measurement is started but not
    completed after 4 sec, the measurement is terminated and a message shown on
    the LCD.

3.  Elapsed time and speed displayed properly.  The elapsed time is shown to 1
    ms precision and the calculation of the speed based on the time delay
    between the sensors is correct and is shown to a precision of 0.1 cm/sec.

4.  The LED timing indicator operates properly, going on at the start of a
    timing event and off when it is complete.

5.  Rotary encoder can adjust threshold between 1 and 99 cm/sec.

6.  Buzzer sounds warning if speed measured on the local device is above the
    speed set with the rotary encoder.

Checkpoint 2:

1.  The servo motor adjusts the indicator to correctly point at speed that was
    measured on the local device.

2.  The maxium speed threshold is stored in EEPROM and retrieved when
    restarted.

3.  After a speed measurement is complete the device sends local speed to
    remote device over the serial link.

4.  Device can receive a speed from the remote device and displays it on LCD
    with 0.1 cm/sec precision.

5.  The red and green LEDs operate to show how the local and remote speeds
    compare.



Review Question 1 (Cost Analysis):

Assume we are building 1000 units of this system.  Use the provided part
numbers (see the webpage) and the digikey.com or jameco.com website to find the
total **cost per unit** (again assume we build a quantity of 1000 units) for
these speed traps.  Itemize the part costs (list each part and its unit cost
when bought in units of 1000) and then show the final cost per unit below.
Note: You only need to price the components used in the project (not all the
components in your lab kit.  Also, you do not need to account for the cost of
the circuit board or wires. In a real environment we would manufacture a PCB
(Printed Circuit Board). As an optional task, you can search online for PCB
manufacturers and what the costs and options are in creating a PCB.

ITEMIZED PART COSTS
    1x Wire stripper = $6.99
    1x USB Cable = $0.55
    1x Arduino Uno = $27.60
    1x LCD Shield $9.89
    8x Resistors = $0.63
    1x Green LED = $0.12
    1x Red LED = $0.12
    1x Integrated Circuit (74HCT125N) = $2.00
    1x Rotary encoder = $0.65
    1x Buzzer = $1.09
    1x Servo motor = $3.49
    2x White LED = $0.24
    2x Phototransistor $0.44 

FINAL COST PER UNIT: $53.81



Review Question 2 (Health/Safety/Reliability)

Assume this system was to be sold to consumers for use at their home.

Considering reliability, health, and safety...

 - What scenarios might you suggest testing (considering both HW and SW) 
    before releasing the product for use? 

    For hardware, I was test the different types of things to run through the phototransistors, especially in regards to how transparent the material is because it would affect
    sensitivity of the sensors. Additionally, I would test how far apart the transistors can be to see how large of an object the sensors can sense.
    Software wise, one thing I would test is the accuracy of the system. This could range from the accuracy of the speed readings to the accuracy of the servo motor, which could be done 
    by usage of speed readers and rulers.

 - How might you make your design more reliable? By reliability we don't just
   mean keeping it running correctly (though you should consider that), but
   also how you can detect that a connected component has failed to gracefully
   handle such situations.  You can consider both HW and SW points of failure,
   issues related to the operational environment, etc. and how to mitigate
   those cases.

    To make my design more reliable, a good way to do this in software is by adding more exceptions. Without exceptions, failures in software can cause the whole system to crash, but with exceptions, even on failure
    the system can still be online. Hardware wise, better reliatbility can look like a better board design. This could look like better wire connection placements and better placement of pieces on the breadboard. Good 
    system design can also look like infrastructure and object design, leading to higher chances of a consistent system. A bad system design, both in hardware and software, can result in messy and inaccurate hardware building 
    or "spaghetti code" that is unefficient and obtuse. 
